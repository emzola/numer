// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: activity-service/proto/activity.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActivityService_LogActivity_FullMethodName         = "/activity.ActivityService/LogActivity"
	ActivityService_GetRecentActivities_FullMethodName = "/activity.ActivityService/GetRecentActivities"
	ActivityService_GetAllActivities_FullMethodName    = "/activity.ActivityService/GetAllActivities"
)

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityServiceClient interface {
	LogActivity(ctx context.Context, in *LogActivityRequest, opts ...grpc.CallOption) (*LogActivityResponse, error)
	GetRecentActivities(ctx context.Context, in *GetRecentActivitiesRequest, opts ...grpc.CallOption) (*GetRecentActivitiesResponse, error)
	GetAllActivities(ctx context.Context, in *GetAllActivitiesRequest, opts ...grpc.CallOption) (*GetAllActivitiesResponse, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) LogActivity(ctx context.Context, in *LogActivityRequest, opts ...grpc.CallOption) (*LogActivityResponse, error) {
	out := new(LogActivityResponse)
	err := c.cc.Invoke(ctx, ActivityService_LogActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetRecentActivities(ctx context.Context, in *GetRecentActivitiesRequest, opts ...grpc.CallOption) (*GetRecentActivitiesResponse, error) {
	out := new(GetRecentActivitiesResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetRecentActivities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetAllActivities(ctx context.Context, in *GetAllActivitiesRequest, opts ...grpc.CallOption) (*GetAllActivitiesResponse, error) {
	out := new(GetAllActivitiesResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetAllActivities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
// All implementations must embed UnimplementedActivityServiceServer
// for forward compatibility
type ActivityServiceServer interface {
	LogActivity(context.Context, *LogActivityRequest) (*LogActivityResponse, error)
	GetRecentActivities(context.Context, *GetRecentActivitiesRequest) (*GetRecentActivitiesResponse, error)
	GetAllActivities(context.Context, *GetAllActivitiesRequest) (*GetAllActivitiesResponse, error)
	mustEmbedUnimplementedActivityServiceServer()
}

// UnimplementedActivityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActivityServiceServer struct {
}

func (UnimplementedActivityServiceServer) LogActivity(context.Context, *LogActivityRequest) (*LogActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogActivity not implemented")
}
func (UnimplementedActivityServiceServer) GetRecentActivities(context.Context, *GetRecentActivitiesRequest) (*GetRecentActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentActivities not implemented")
}
func (UnimplementedActivityServiceServer) GetAllActivities(context.Context, *GetAllActivitiesRequest) (*GetAllActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActivities not implemented")
}
func (UnimplementedActivityServiceServer) mustEmbedUnimplementedActivityServiceServer() {}

// UnsafeActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServiceServer will
// result in compilation errors.
type UnsafeActivityServiceServer interface {
	mustEmbedUnimplementedActivityServiceServer()
}

func RegisterActivityServiceServer(s grpc.ServiceRegistrar, srv ActivityServiceServer) {
	s.RegisterService(&ActivityService_ServiceDesc, srv)
}

func _ActivityService_LogActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).LogActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_LogActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).LogActivity(ctx, req.(*LogActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetRecentActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetRecentActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetRecentActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetRecentActivities(ctx, req.(*GetRecentActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetAllActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetAllActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetAllActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetAllActivities(ctx, req.(*GetAllActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityService_ServiceDesc is the grpc.ServiceDesc for ActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogActivity",
			Handler:    _ActivityService_LogActivity_Handler,
		},
		{
			MethodName: "GetRecentActivities",
			Handler:    _ActivityService_GetRecentActivities_Handler,
		},
		{
			MethodName: "GetAllActivities",
			Handler:    _ActivityService_GetAllActivities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity-service/proto/activity.proto",
}
