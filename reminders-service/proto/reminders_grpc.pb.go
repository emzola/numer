// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: reminders-service/proto/reminders.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RemindersService_ScheduleReminder_FullMethodName = "/reminders.RemindersService/ScheduleReminder"
)

// RemindersServiceClient is the client API for RemindersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemindersServiceClient interface {
	ScheduleReminder(ctx context.Context, in *ScheduleReminderRequest, opts ...grpc.CallOption) (*ScheduleReminderResponse, error)
}

type remindersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemindersServiceClient(cc grpc.ClientConnInterface) RemindersServiceClient {
	return &remindersServiceClient{cc}
}

func (c *remindersServiceClient) ScheduleReminder(ctx context.Context, in *ScheduleReminderRequest, opts ...grpc.CallOption) (*ScheduleReminderResponse, error) {
	out := new(ScheduleReminderResponse)
	err := c.cc.Invoke(ctx, RemindersService_ScheduleReminder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemindersServiceServer is the server API for RemindersService service.
// All implementations must embed UnimplementedRemindersServiceServer
// for forward compatibility
type RemindersServiceServer interface {
	ScheduleReminder(context.Context, *ScheduleReminderRequest) (*ScheduleReminderResponse, error)
	mustEmbedUnimplementedRemindersServiceServer()
}

// UnimplementedRemindersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemindersServiceServer struct {
}

func (UnimplementedRemindersServiceServer) ScheduleReminder(context.Context, *ScheduleReminderRequest) (*ScheduleReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleReminder not implemented")
}
func (UnimplementedRemindersServiceServer) mustEmbedUnimplementedRemindersServiceServer() {}

// UnsafeRemindersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemindersServiceServer will
// result in compilation errors.
type UnsafeRemindersServiceServer interface {
	mustEmbedUnimplementedRemindersServiceServer()
}

func RegisterRemindersServiceServer(s grpc.ServiceRegistrar, srv RemindersServiceServer) {
	s.RegisterService(&RemindersService_ServiceDesc, srv)
}

func _RemindersService_ScheduleReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindersServiceServer).ScheduleReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemindersService_ScheduleReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindersServiceServer).ScheduleReminder(ctx, req.(*ScheduleReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemindersService_ServiceDesc is the grpc.ServiceDesc for RemindersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemindersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reminders.RemindersService",
	HandlerType: (*RemindersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleReminder",
			Handler:    _RemindersService_ScheduleReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminders-service/proto/reminders.proto",
}
